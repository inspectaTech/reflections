How is the staging area different from the working directory and the repository? What value do you think it offers?

	the staging area is different from the working directory because it holds the value
	of the last commit while you change the staging area.  when you run git status it
	is able to tell you that you have made changes in the working directory.
	
	the staging area is different from the repository because it holds changes you have made to the working directory once you have added the file to the staging area to be reviewed to be committed. it allows you an additional step of review before actually committing to a commit.
	
	try notepad.exe as core.editor
	
How can you use the staging area to make sure you have one commit per logical change?

	The staging area allows me to add on or more files that are associated with the 
	particular logical change i am making (as the files are related in some way to one
	another.)  for example i can make a change to an html file, its corresponding js file 
	and its corresponding style sheet and add the changes of all 3 files to the same 
	commit allowing me to track one logical change whose code spanned over 3 files.
	
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	I Need more info to answer this.  right now I can see the benefits but what about when 
	the master branch other branches develop separately and independingly from each other, 
	how does the merge process make up for the changes in the two files? what if something 
	the branch was dependant on in the master no longer exists in the master?
	
How do the diagrams help you visualize the branch structure?

	the diagrams did help me visualize the concept of the checkout detached head and the 
	creation of new branches using git checkout -b new_branch_name
	
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The result of merging two branches together is one branch.  more specifically 
	whatever branch is checked out is the one that is the merge heading. it represented in the diagram the way it is because it literally becomes the title for 2 branches 
	worth of commits. almost like the commits are still there only there is one resulting
	file instead of 2.
	
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	
	The pros of Gits automatic merging is you don't have to go hunting for other peoples
	changes on thousands of lines of code.  Git points the changes out for you to evaluate
	the cons are the git can't determin what is needed beyond that so you still have to 
	made decisions on the code - (also a pro)
	
I wonder are these all the same?